import io.appium.java_client.service.local.AppiumDriverLocalService
import io.appium.java_client.service.local.AppiumServiceBuilder
import io.appium.java_client.service.local.flags.GeneralServerFlag
import net.masterthought.cucumber.ReportBuilder
import groovyx.gpars.*
import java.text.DateFormat

// Apply the java-library plugin to add support for Java Library
apply plugin: 'groovy'
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    maven { url "http://dl.bintray.com/epam/reportportal" }
    maven { url 'https://jitpack.io' }
}
buildscript {
    repositories {
        mavenCentral()
        maven { url "http://dl.bintray.com/epam/reportportal" }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "org.codehaus.gpars:gpars:1.2.1",
                "net.masterthought:cucumber-reporting:0.4.0",
                "io.appium:java-client:5.0.4"
    }
}

dependencies {
    compile group: 'info.cukes', name: 'cucumber-jvm', version: '1.2.5', ext: 'pom'
    compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
    compile group: 'io.appium', name: 'java-client', version: '5.0.4'
    testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.5'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'net.masterthought:cucumber-sandwich:3.12.0'
    compile 'com.github.reportportal:agent-java-cucumber:73bee44'
    compile 'com.epam.reportportal:logger-java-logback:3.0.0'
}

def startServer() {
    def service = AppiumDriverLocalService.buildService(new AppiumServiceBuilder()
            .usingDriverExecutable(new File(("/usr/local/bin/node")))
            .withAppiumJS(new File(("/usr/local/bin/appium")))
            .withIPAddress("0.0.0.0")
            .usingPort(4723)
            .withArgument(GeneralServerFlag.SESSION_OVERRIDE)
            .withLogFile(new File("build/appium.log")))
    service.start()
}

def getDevices() {
    def deviceIds = []
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "adb", "devices", "-l"
        standardOutput = stdout
    }
    Scanner scan = new Scanner(stdout.toString())
    while (scan.hasNextLine()) {
        String oneLine = scan.nextLine()
        if (oneLine.contains("model")) {
            def deviceId = oneLine.split("device")[0].trim()
            deviceIds.add(deviceId)
            println "Adding device == " + deviceId
        }
    }
    return deviceIds
}


task runAllTest() {

    doLast {
        startServer()

        def devices = getDevices()
        def poolSize = devices.size()
        println "Total number of connected device -- " + poolSize
        GParsPool.withPool(1) {
            devices.eachParallel { String device ->
                javaexec {
                    main = "cucumber.api.cli.Main"
                    classpath = sourceSets.test.runtimeClasspath
                    args = ["-p", "pretty", "-p", "json:${reporting.baseDir}/cucumber/cucumber.json", "--glue", "steps", "-t", tags,
                            "${project.projectDir}/src/test/resources/features/", "--plugin", "steps.RpListener"]
                    systemProperties = [
                           "udid" : System.setProperty("udid", device)
                    ]
                }
            }
        }
    }
}

private static String getTags() {
    def tags = System.getProperty("tags")
    if (tags != null)
        return tags
    return "~wip"
}

task generateReport() {
    println "Inside report generation"
    doLast {
        def jsonReports = fileTree("${reporting.baseDir}/cucumber/").include '**/*.json'.toString()
        File reportOutputDirectory = new File("${reporting.baseDir}/cucumber")

        List<String> jsonReportFiles = new ArrayList<String>()
        jsonReports.each { File file ->
            jsonReportFiles.add("${reporting.baseDir}/cucumber/${file.name}".toString())
        }
//        exec {
//            commandLine "java", "-jar", "cucumber-sandwich.jar", "-n", "-f", "$jsonReportFiles", "-o", "$reportOutputDirectory"
//        }
        ReportBuilder reportBuilder = new ReportBuilder(
                jsonReportFiles,
                reportOutputDirectory,
                "",
                DateFormat.instance.format(new Date()),
                "appium",
                false,                        // boolean skippedFails,
                false,                        // boolean pendingFails,
                true,                         // boolean undefinedFails,
                false,                        // boolean missingFails
                false,                        // boolean flashCharts,
                true,                         // boolean runWithJenkins,
                false,                        // boolean artifactsEnabled,
                "",                           // String artifactConfig
                true,                         // boolean highCharts
                true                          // boolean parallelTesting
        )
        reportBuilder.generateReports()
    }
}

runAllTest.finalizedBy(generateReport)