import net.masterthought.cucumber.ReportBuilder
import java.text.DateFormat

// Apply the java-library plugin to add support for Java Library
apply plugin: 'groovy'
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.codehaus.gpars:gpars:1.2.1",
                "net.masterthought:cucumber-reporting:0.4.0"
    }
}

dependencies {
    compile group: 'info.cukes', name: 'cucumber-jvm', version: '1.2.5', ext: 'pom'
    compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
    compile group: 'io.appium', name: 'java-client', version: '5.0.0'
    testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.5'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'net.masterthought:cucumber-sandwich:3.12.0'
}


task runAllTest() {
    doLast {
        def argList = ["-p", "pretty", "-p", "json:${reporting.baseDir}/cucumber/cucumber.json", "--glue", "steps", "-t", tags,
                       "${project.projectDir}/src/test/resources/features"]
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = sourceSets.test.runtimeClasspath
            args = argList
        }
    }
}

private String getTags() {
    def tags = System.getProperty("tags")
    if (tags != null)
        return tags
    return "~wip"
}


task generateReport() {
    println "Inside report generation"
    doLast {
        def jsonReports = fileTree("${reporting.baseDir}/cucumber/").include '**/*.json'.toString()
        File reportOutputDirectory = new File("${reporting.baseDir}/cucumber")

        List<String> jsonReportFiles = new ArrayList<String>()
        jsonReports.each { File file ->
            jsonReportFiles.add("${reporting.baseDir}/cucumber/${file.name}".toString())
        }
//        exec {
//            commandLine "java", "-jar", "cucumber-sandwich.jar", "-n", "-f", "$jsonReportFiles", "-o", "$reportOutputDirectory"
//        }
        ReportBuilder reportBuilder = new ReportBuilder(
                jsonReportFiles,
                reportOutputDirectory,
                "",
                DateFormat.instance.format(new Date()),
                "appium",
                false,                        // boolean skippedFails,
                false,                        // boolean pendingFails,
                true,                         // boolean undefinedFails,
                false,                        // boolean missingFails
                false,                        // boolean flashCharts,
                true,                         // boolean runWithJenkins,
                false,                        // boolean artifactsEnabled,
                "",                           // String artifactConfig
                true,                         // boolean highCharts
                true                          // boolean parallelTesting
        )
        reportBuilder.generateReports()
    }
}

runAllTest.finalizedBy(generateReport)